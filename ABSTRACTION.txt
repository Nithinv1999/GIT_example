ABSTRACTION

Hiding the complexity of the system and exposing only the required 
functionality to the end user is called as abstraction.

Hiding the implementation details of the class and exposing 
only the behaviours or services is called as abstraction.

➢ To achieve abstraction , declare all the essential properties in the interface
and provide the implementation in the sub class.
➢ Create reference variable of interface type and initialize that 
reference variable with the implementation class object. This is how we can 
achieve Abstraction.
➢ Through Interface we can achieve 100% Abstraction.
➢ Through abstract class we can achieve up to 100% Abstraction.
Note :
➢ When we don’t know 100% implementation then we should go for interface.
➢ When we know partial implementation, we go for abstract class.
➢ The above points are to justify when to go for abstract class and 
when to for interface.

------------------------->>

interface Account
{
public void deposit();
public void withdraw();
}
class Saving implements Account
{
public void deposit()
{
System.out.println("Money is deposit in saving account");
}
public void withdraw()
{
System.out.println("money is withdraw from saving account");
}
}
class Fd implements Account
{
public void deposit()
{
System.out.println("money is deposit in FD account");
}
public void withdraw()
{
System.out.println("money is withdraw from FD account");
}
}
class AcntMgr
{
public static Account createAcnt(char type)
{
Account a1;
if(type=='S')
{
a1 = new Saving();
return a1;
}
else
{
a1 = new Fd();
return a1;
}}}
class Mainclass1
{
public static void main(String[] args)
{
Account a1 = AcntMgr.createAcnt('S');
a1.deposit();
a1.withdraw(); }}